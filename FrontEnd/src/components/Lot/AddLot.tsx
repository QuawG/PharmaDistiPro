import React, { useState, useEffect } from "react";
import { Button, Input, Select, Table, message, Space, Form } from "antd";
import axios from "axios";
import { useAuth } from "../../pages/Home/AuthContext";

interface AddLotProps {
  handleChangePage: (page: string) => void;
}

interface Product {
  productId: number;
  productName: string;
}

interface SelectedProduct {
  id: string;
  name: string;
  price: string;
  manufacturedDate: string;
  expiredDate: string;
  status?: number;
  quantity?: number; // Th√™m quantity n·∫øu c·∫ßn nh·∫≠p t·ª´ UI
}

const AddLot: React.FC<AddLotProps> = ({ handleChangePage }) => {
  const { user } = useAuth();
  const [lotCode, setLotCode] = useState<string>("");
  const [lotId, setLotId] = useState<number | null>(null);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProducts, setSelectedProducts] = useState<SelectedProduct[]>([]);
  const [error, setError] = useState<string>("");
  const [isLotCreated, setIsLotCreated] = useState<boolean>(false);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get("http://pharmadistiprobe.fun/api/Product/ListProduct");
        console.log("D·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API:", response.data);
        setProducts(response.data.data || []);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m.");
      }
    };
    fetchProducts();
  }, []);

  const productOptions = products.map((p) => ({
    value: String(p.productId),
    label: p.productName,
  }));

  const handleSelectProduct = (value: string) => {
    const product = products.find((p) => String(p.productId) === value);
    if (product && !selectedProducts.some((p) => p.id === String(product.productId))) {
      setSelectedProducts([
        ...selectedProducts,
        {
          id: String(product.productId),
          name: product.productName,
          price: "",
          manufacturedDate: "",
          expiredDate: "",
          status: 0,
          quantity: 0, // M·∫∑c ƒë·ªãnh quantity l√† 0
        },
      ]);
    }
  };

  const handleRemoveProduct = (id: string) => {
    setSelectedProducts(selectedProducts.filter((p) => p.id !== id));
  };

  const handleCreateLot = async () => {
    if (!user) {
      setError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o l√¥.");
      return;
    }

    try {
      const generatedLotCode = `LOT${Date.now()}`;
      const lotPayload = {
        lotCode: generatedLotCode,
      };
      console.log("D·ªØ li·ªáu g·ª≠i l√™n API Lot:", lotPayload);
      const createResponse = await axios.post("http://pharmadistiprobe.fun/api/Lot", lotPayload, {
        headers: { "Content-Type": "application/json" },
      });
      console.log("Response t·ª´ API Lot (to√†n b·ªô):", createResponse.data);

      const lotCodeFromResponse = createResponse.data.data.lotCode || generatedLotCode;

      const getLotResponse = await axios.get(
        `http://pharmadistiprobe.fun/api/Lot/${lotCodeFromResponse}`,
        {
          headers: { "Content-Type": "application/json" },
        }
      );
      console.log("Response t·ª´ API Get Lot (to√†n b·ªô):", getLotResponse.data);

      const rawLotId = getLotResponse.data.data?.lotId;
      const lotId = Number(rawLotId);

      if (isNaN(lotId) || lotId <= 0) {
        throw new Error("Kh√¥ng th·ªÉ l·∫•y lotId h·ª£p l·ªá t·ª´ API Get Lot.");
      }

      setLotId(lotId);
      setLotCode(lotCodeFromResponse);
      setIsLotCreated(true);
      console.log("lotId ƒë√£ set:", lotId);
      message.success(`L√¥ ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi m√£: ${lotCodeFromResponse}`);
    } catch (error: any) {
      console.error("L·ªói khi t·∫°o l√¥:", error);
      if (error.response) {
        console.error("Chi ti·∫øt l·ªói t·ª´ server:", error.response.data);
        message.error(`Kh√¥ng th·ªÉ t·∫°o l√¥: ${error.response.data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"}`);
        setError(`Kh√¥ng th·ªÉ t·∫°o l√¥: ${error.response.data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"}`);
      } else {
        message.error("Kh√¥ng th·ªÉ t·∫°o l√¥. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c response.");
        setError("L·ªói khi t·∫°o l√¥: " + error.message);
      }
    }
  };

  const handleSave = async () => {
    if (selectedProducts.length === 0) {
      setError("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m.");
      return;
    }

    for (const product of selectedProducts) {
      if (!product.price.trim() || !product.manufacturedDate || !product.expiredDate) {
        setError("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin cho t·∫•t c·∫£ s·∫£n ph·∫©m.");
        return;
      }
    }

    if (!lotId || lotId <= 0) {
      setError("lotId kh√¥ng h·ª£p l·ªá. Vui l√≤ng t·∫°o l·∫°i l√¥.");
      return;
    }

    setError("");

    try {
      // T·∫°o m·∫£ng payload tr·ª±c ti·∫øp
      const payload = selectedProducts.map((product) => ({
        lotId: lotId,
        productId: Number(product.id),
        quantity: product.quantity || 0, // Th√™m quantity, m·∫∑c ƒë·ªãnh 0 n·∫øu kh√¥ng c√≥
        manufacturedDate: new Date(product.manufacturedDate).toISOString(),
        expiredDate: new Date(product.expiredDate).toISOString(),
        supplyPrice: Number(product.price),
        status: 0,
      }));

      console.log("D·ªØ li·ªáu g·ª≠i l√™n API ProductLot:", payload);

      const response = await axios.post("http://pharmadistiprobe.fun/api/ProductLot", payload, {
        headers: { "Content-Type": "application/json" },
      });
      console.log("Response t·ª´ API ProductLot:", response.data);

      message.success("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o l√¥ th√†nh c√¥ng!");
      handleChangePage("Danh s√°ch l√¥ h√†ng");
    } catch (error: any) {
      console.error("L·ªói khi th√™m s·∫£n ph·∫©m v√†o l√¥:", error);
      if (error.response) {
        console.error("Chi ti·∫øt l·ªói t·ª´ server:", error.response.data);
        const errorDetails = error.response.data.errors
          ? Object.values(error.response.data.errors).join(", ")
          : error.response.data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
        message.error(`Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m: ${errorDetails}`);
        setError(`L·ªói: ${errorDetails}`);
      } else {
        message.error("Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi.");
        setError("L·ªói k·∫øt n·ªëi ƒë·∫øn server.");
      }
    }
  };

  const columns = [
    { title: "M√£ SP", dataIndex: "id" },
    { title: "T√™n SP", dataIndex: "name" },
    {
      title: "Gi√° nh·∫≠p",
      dataIndex: "price",
      render: (_: any, record: SelectedProduct) => (
        <Input
          value={record.price}
          type="number"
          onChange={(e) =>
            setSelectedProducts((prev) =>
              prev.map((p) => (p.id === record.id ? { ...p, price: e.target.value } : p))
            )
          }
        />
      ),
    },
    {
      title: "Ng√†y s·∫£n xu·∫•t",
      dataIndex: "manufacturedDate",
      render: (_: any, record: SelectedProduct) => (
        <Input
          type="date"
          value={record.manufacturedDate}
          onChange={(e) =>
            setSelectedProducts((prev) =>
              prev.map((p) => (p.id === record.id ? { ...p, manufacturedDate: e.target.value } : p))
            )
          }
        />
      ),
    },
    {
      title: "Ng√†y h·∫øt h·∫°n",
      dataIndex: "expiredDate",
      render: (_: any, record: SelectedProduct) => (
        <Input
          type="date"
          value={record.expiredDate}
          onChange={(e) =>
            setSelectedProducts((prev) =>
              prev.map((p) => (p.id === record.id ? { ...p, expiredDate: e.target.value } : p))
            )
          }
        />
      ),
    },
    {
      title: "X√≥a",
      render: (_: any, record: SelectedProduct) => (
        <Button danger onClick={() => handleRemoveProduct(record.id)}>
          üóë
        </Button>
      ),
    },
  ];

  return (
    <div style={{ padding: "24px", background: "#fafbfe", borderRadius: "8px", marginTop: "60px" }}>
      <h2>T·∫°o m·ªõi l√¥ h√†ng</h2>

      {error && <p style={{ color: "red" }}>{error}</p>}

      <Form layout="vertical" onFinish={handleSave}>
        <Form.Item label="·∫§n n√∫t ƒë·ªÉ t·∫°o m√£ l√¥ h√†ng">
          {isLotCreated ? (
            <Input value={lotCode} disabled />
          ) : (
            <Button type="primary" onClick={handleCreateLot}>
              T·∫°o l√¥
            </Button>
          )}
        </Form.Item>

        {isLotCreated && (
          <>
            <Form.Item label="S·∫£n ph·∫©m" required>
              <Select
                options={productOptions}
                onChange={handleSelectProduct}
                placeholder="Ch·ªçn s·∫£n ph·∫©m..."
                style={{ width: "100%" }}
              />
            </Form.Item>

            {selectedProducts.length > 0 && (
              <Table
                columns={columns}
                dataSource={selectedProducts}
                rowKey="id"
                pagination={false}
                bordered
                style={{ marginTop: "20px" }}
              />
            )}
          </>
        )}

        <Space style={{ marginTop: "20px" }}>
          {isLotCreated && (
            <Button type="primary" htmlType="submit">
              L∆∞u s·∫£n ph·∫©m
            </Button>
          )}
          <Button onClick={() => handleChangePage("Danh s√°ch l√¥ h√†ng")}>Quay l·∫°i</Button>
        </Space>
      </Form>
    </div>
  );
};

export default AddLot;